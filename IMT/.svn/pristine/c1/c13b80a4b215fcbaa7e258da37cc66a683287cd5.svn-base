package com.imt.pat.controller;

import java.io.IOException;
import java.text.DateFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.util.UUID;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.apache.jasper.tagplugins.jstl.core.ForEach;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.test.context.TestExecutionListeners;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;

import com.imt.pat.dao.PatientDao;
import com.imt.pat.entity.PageLimit;
import com.imt.pat.entity.patientEntity;
import com.imt.pat.service.PatientService;
import com.imt.sys.entity.PageLimitAll;
import com.imt.sys.util.uploadText;

@Controller
public class PatientController {
	
	@Autowired
	private PatientService patientService;
	private PageLimitAll pageLimitAll=new PageLimitAll();
	private patientEntity patientEntity=new patientEntity();
	private PageLimit pageLimit=new PageLimit();
	//添加患者信息
	@RequestMapping(value="/Template/addPatient",method=RequestMethod.POST)
	public void addPatient(HttpServletRequest request,HttpServletResponse response) throws IOException, ParseException{
		System.out.println("进来了  ADDpatient====");
		String pat_name=request.getParameter("pat_name");
		String pat_age=request.getParameter("pat_age");
		String pat_sex=request.getParameter("pat_sex");
		String con_name=request.getParameter("con_name");
		String con_country=request.getParameter("con_country");
		String pat_sysptom=request.getParameter("pat_sysptom");
		String pat_entity=request.getParameter("pat_entity");
		String report=request.getParameter("report");
		String passport=request.getParameter("passport");
		String remark=request.getParameter("remark");
		String pat_address=request.getParameter("pat_address");
		String pat_con_rel=request.getParameter("pat_con_rel");
		String con_address=request.getParameter("con_address");
		String con_email=request.getParameter("con_email");
		String critical=request.getParameter("critical");
		String resource=request.getParameter("resource");
		String hospital=request.getParameter("hospital");
		String rep_time=request.getParameter("rep_time");
		String con_phone=request.getParameter("con_phone");
		String select2=request.getParameter("select2");
		String pat_intion_lev=request.getParameter("pat_intion_lev");
		String uetext=request.getParameter("uetext");
		System.out.println("text文本框的内容====="+uetext);
		/*
		 * 将文本框的内容保存到本地F：//text
		 * */
		UUID uuid=UUID.randomUUID();
		System.out.println("uuid======"+uuid);
		uploadText up=new uploadText();
		up.saveAsFileWriter(uetext, uuid);
		String ue="F:/text/"+uuid+".txt";
		patientEntity.setUe(ue);
		int ipat_age=Integer.parseInt(pat_age);
		int ipat_intion_lev=Integer.parseInt(pat_intion_lev);
		int icon_phone=Integer.parseInt(con_phone);
		SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
		String[] rep_times=rep_time.split("/");
		String times=rep_times[2]+"-"+rep_times[0]+"-"+rep_times[1];
		Date date=sdf.parse(times);
		patientEntity.setConsultation_address(con_address);
		patientEntity.setConsultation_email(con_email);
		patientEntity.setCritical_state(critical);
		patientEntity.setHospital_state(hospital);
		patientEntity.setPatient_address(pat_address);
		patientEntity.setPatient_age(ipat_age);
		patientEntity.setPatient_consultation_country(con_country);
		patientEntity.setPatient_consultation_name(con_name);
		patientEntity.setPatient_consultation_phone(icon_phone);
		patientEntity.setPatient_consultation_relation(pat_con_rel);
		patientEntity.setPatient_entity(pat_entity);
		patientEntity.setPatient_intention_level(ipat_intion_lev);
		patientEntity.setPatient_name(pat_name);
		patientEntity.setPatient_passport_state(passport);
		patientEntity.setPatient_report_state(report);
		patientEntity.setPatient_sex(pat_sex);
		patientEntity.setPatient_sysptom(pat_sysptom);
		patientEntity.setRemark(remark);
		patientEntity.setReport_date(date);
		patientEntity.setResource_state(resource);
		patientEntity.setSys_user_id(1);
		patientEntity.setPatient_id(0);
		patientEntity.setPatient_isDel(0);
		int addPatient = patientService.addPatient(patientEntity);
		response.setCharacterEncoding("utf-8");
		if(addPatient>0){
			response.getWriter().write("success");
		}else{
			response.getWriter().write("error");
		}
	}
	//查询所有的患者
	
	@RequestMapping(value="/Template/queryAllPatient",method=RequestMethod.GET)
	public String queryAllPatient(HttpServletRequest request,HttpServletResponse response,Model model) throws IOException{
		System.out.println("1111111111");
		String patient_isDel=request.getParameter("patient_isDel");
		int isDel=Integer.parseInt(patient_isDel);
		patientEntity.setPatient_isDel(isDel);
		int patient_isDels=Integer.parseInt(patient_isDel);
		String pindex=request.getParameter("pindex");
		int ipindex=Integer.parseInt(pindex);
		int offset=(ipindex-1)*10;
		int startlimit=10;
		pageLimit.setOffset(offset);
		pageLimit.setStartlimit(startlimit);
		pageLimit.setPatient_isDel(patient_isDels);
		List<patientEntity> queryAllPatient = patientService.queryAllPatient(pageLimit);
		response.setCharacterEncoding("utf-8");
		System.out.println("size=="+queryAllPatient.size());
		
		//查询所有患者总数
		int queryAllPatientCount=patientService.queryAllPatientCount(patientEntity);
		int currpage=queryAllPatientCount/startlimit;
		int spagesize=queryAllPatientCount%10;
		int nowpage=0;
		if(spagesize==0){
				nowpage=currpage;
		}else{
			nowpage=currpage+1;
		}
		SimpleDateFormat df = new SimpleDateFormat("yyyy-MM-dd");//设置日期格式
		for (patientEntity p : queryAllPatient) {
			String times= df.format(p.getReport_date());
			/*Date dates=df.parse(times);
			p.setReport_date(dates);
			System.out.println("times==="+times+"dates==="+dates);*/
			p.setRep_date(times);
		}
		
		//设置分页信息
		pageLimitAll.setPindex(ipindex);
		pageLimitAll.setPcount(queryAllPatientCount);
		pageLimitAll.setPtotalpages(nowpage);
		pageLimitAll.setPsize(startlimit);
		request.setAttribute("page", pageLimitAll); 
		//model.addAttribute("patientList", queryAllPatientCount);
		System.out.println("count========="+queryAllPatientCount);
		System.out.println("list=="+queryAllPatient.size());
		request.setAttribute("patientList", queryAllPatient);
		return "find-1";
	}
	
	//新资源30天内 新资源
	@RequestMapping(value="/Template/querynewResource",method=RequestMethod.GET)
	public String querynewResource(HttpServletRequest req,
			@RequestParam("pindex") int pindex,
			@RequestParam("pcount") int pcount,
			Model model) throws ParseException{
		
		int offset=(pindex-1)*10;
		int startlimit=10;
		
		System.out.println("pindex==="+pindex);
		SimpleDateFormat df = new SimpleDateFormat("yyyy-MM-dd");//设置日期格式
		String currdate = df.format(new Date());
		System.out.println( "当前时间"+currdate);// new Date()为获取当前系统时间
		String[] currdatea=currdate.split("-");
		String cyear=currdatea[0];
		String cmonth=currdatea[1];
		String cday=currdatea[2];
		int dday=Integer.parseInt(cday);
		int mmonth=Integer.parseInt(cmonth);
		if((dday-31)==0){
			dday=1;
		}else if((dday-30)==0){
			dday=1;
		}else if((dday-30)<0){
			mmonth-=1;
		}
		String ldate=cyear+"-"+mmonth+"-"+dday;
		System.out.println("cdate==="+currdate+"ldate==="+ldate);
		pageLimit.setOffset(offset);
		pageLimit.setStartlimit(startlimit);
		pageLimit.setLdate(ldate);
		pageLimit.setCurrdate(currdate);
		List<com.imt.pat.entity.patientEntity> queryNewPatient = patientService.queryNewPatient( pageLimit);
		for (patientEntity p : queryNewPatient) {
			String times= df.format(p.getReport_date());
			/*Date dates=df.parse(times);
			p.setReport_date(dates);
			System.out.println("times==="+times+"dates==="+dates);*/
			p.setRep_date(times);
		}
		
		int queryNewPatientCount = patientService.queryNewPatientCount(pageLimit);
		int currpage=queryNewPatientCount/startlimit;
		int spagesize=queryNewPatientCount%10;
		int nowpage=0;
		if(spagesize==0){
				nowpage=currpage;
		}else{
			nowpage=currpage+1;
		}
		//设置分页信息
		pageLimitAll.setPindex(pindex);
		pageLimitAll.setPcount( queryNewPatientCount);
		pageLimitAll.setPtotalpages(nowpage);
		pageLimitAll.setPsize(startlimit);
		req.setAttribute("page", pageLimitAll); 
		model.addAttribute("newResourceList", queryNewPatient);
		System.out.println("count========="+queryNewPatientCount);
		System.out.println("list=="+queryNewPatient.size());
		//req.getSession().setAttribute("newResourceList", queryNewPatient);
		return "querynewResource";
	}
	
	//过期资源 30天外  过期资源
	@RequestMapping(value="/Template/queryOutPatient",method=RequestMethod.GET)
	public String queryOutPatient(HttpServletRequest req,
			@RequestParam("pindex") int pindex,
			@RequestParam("pcount") int pcount,
			Model model){
		int offset=(pindex-1)*10;
		int startlimit=10;
		SimpleDateFormat df = new SimpleDateFormat("yyyy-MM-dd");//设置日期格式
		String currdate = df.format(new Date());
		System.out.println( "当前时间"+currdate);// new Date()为获取当前系统时间
		String[] currdatea=currdate.split("-");
		String cyear=currdatea[0];
		String cmonth=currdatea[1];
		String cday=currdatea[2];
		int dday=Integer.parseInt(cday);
		int mmonth=Integer.parseInt(cmonth);
		if((dday-31)==0){
			dday=1;
		}else if((dday-30)==0){
			dday=1;
		}else if((dday-30)<0){
			mmonth-=1;
		}
		String ldate=cyear+"-"+mmonth+"-"+dday;
		String lldate="1901-01-01";
		String nndate="2200-01-01";
		pageLimit.setLdate(ldate);
		pageLimit.setOffset(offset);
		pageLimit.setStartlimit(startlimit);
		pageLimit.setNdate(lldate);
		System.out.println("cdate==="+currdate+"ldate==="+ldate);
		List<com.imt.pat.entity.patientEntity> queryOutPatient = patientService.queryOutPatient(pageLimit);
		for (patientEntity p : queryOutPatient) {
			String times= df.format(p.getReport_date());
			/*Date dates=df.parse(times);
			p.setReport_date(dates);
			System.out.println("times==="+times+"dates==="+dates);*/
			p.setRep_date(times);
		}
		int queryOutPatientCount = patientService.queryOutPatientCount(pageLimit);
		int currpage=queryOutPatientCount/startlimit;
		int spagesize=queryOutPatientCount%10;
		int nowpage=0;
		if(spagesize==0){
				nowpage=currpage;
		}else{
			nowpage=currpage+1;
		}
		//设置分页信息
		pageLimitAll.setPindex(pindex);
		pageLimitAll.setPcount( queryOutPatientCount);
		pageLimitAll.setPtotalpages(nowpage);
		pageLimitAll.setPsize(startlimit);
		req.setAttribute("page", pageLimitAll); 
		model.addAttribute("queryOutPatientList", queryOutPatient);
		System.out.println("list=="+queryOutPatient.size());
		return "queryOutPatient";
		
	}
	
	//无效资源 resource_state  ==no   无效
	@RequestMapping(value="/Template/queryInvalidResource",method=RequestMethod.GET)
	public String queryInvalidResource(HttpServletRequest req,
			@RequestParam("pindex") int pindex,
			@RequestParam("pcount") int pcount,
			Model model){
		System.out.println("进来了无效资源查询");
		int offset=(pindex-1)*10;
		int startlimit=10;
		SimpleDateFormat df = new SimpleDateFormat("yyyy-MM-dd");//设置日期格式
		pageLimit.setOffset(offset);
		pageLimit.setStartlimit(startlimit);
		pageLimit.setPatient_isDel(0);
		List<com.imt.pat.entity.patientEntity> queryInvalidResource = patientService.queryInvalidResource(pageLimit);
		for (patientEntity p : queryInvalidResource) {
			String times= df.format(p.getReport_date());
			/*Date dates=df.parse(times);
			p.setReport_date(dates);
			System.out.println("times==="+times+"dates==="+dates);*/
			p.setRep_date(times);
		}
		System.out.println("limit====="+offset+startlimit);
		int queryInvalidResourceCount = patientService.queryInvalidResourceCount(pageLimit);
		int currpage=queryInvalidResourceCount/startlimit;
		int spagesize=queryInvalidResourceCount%10;
		int nowpage=0;
		if(spagesize==0){
				nowpage=currpage;
		}else{
			nowpage=currpage+1;
		}
		System.out.println("FENYE===="+pindex+queryInvalidResourceCount+nowpage+startlimit);
		//设置分页信息
		pageLimitAll.setPindex(pindex);
		pageLimitAll.setPcount(queryInvalidResourceCount);
		pageLimitAll.setPtotalpages(nowpage);
		pageLimitAll.setPsize(startlimit);
		req.setAttribute("page", pageLimitAll); 
		System.out.println(queryInvalidResource.size());
		model.addAttribute("queryInvalidResource", queryInvalidResource);
		return "invalidResource";
	}
	
	
	//所有患者 删除
	@RequestMapping(value="/Template/deletePatient",method=RequestMethod.POST)
	public void deletePatient(HttpServletRequest req,HttpServletResponse resp) throws IOException{
		String ids = req.getParameter("ids");
		System.out.println("ids==============="+ids);
		String[] sids = ids.split(",");
		System.out.println(sids[0]);
		int[]  iids=new int[10];
		for(int i=0;i<sids.length;i++){
			System.out.println(sids[i]);
			int a=Integer.parseInt(sids[i]);
			iids[i]=a;
		}
		int updatePat = patientService.updatePatient(iids);
		System.out.println("刪除了=========="+updatePat);
		resp.setCharacterEncoding("utf-8");
		if(updatePat>0){
			resp.getWriter().write("success");
		}else{
			resp.getWriter().write("error");
		}
	}
	//资源回收站
		@RequestMapping(value="/Template/deleteResource",method=RequestMethod.GET)
		public String deleteResource(HttpServletRequest request,
				HttpServletResponse response,
				@RequestParam("pindex") int pindex,
				@RequestParam("pcount") int pcount,
				Model model){
			int isDel=1;
			int offset=(pindex-1)*10;
			int startlimit=10;
			patientEntity.setPatient_isDel(isDel);
			pageLimit.setOffset(offset);
			pageLimit.setStartlimit(startlimit);
			pageLimit.setPatient_isDel(isDel);
			List<patientEntity> queryAllPatient = patientService.queryAllPatient(pageLimit);
			response.setCharacterEncoding("utf-8");
			System.out.println("size=="+queryAllPatient.size());
			
			//查询所有患者总数
			int queryAllPatientCount=patientService.queryAllPatientCount(patientEntity);
			int currpage=queryAllPatientCount/startlimit;
			int spagesize=queryAllPatientCount%10;
			int nowpage=0;
			if(spagesize==0){
					nowpage=currpage;
			}else{
				nowpage=currpage+1;
			}
			SimpleDateFormat df = new SimpleDateFormat("yyyy-MM-dd");//设置日期格式
			for (patientEntity p : queryAllPatient) {
				String times= df.format(p.getReport_date());
				/*Date dates=df.parse(times);
				p.setReport_date(dates);
				System.out.println("times==="+times+"dates==="+dates);*/
				p.setRep_date(times);
			}
			
			//设置分页信息
			pageLimitAll.setPindex(pindex);
			pageLimitAll.setPcount(queryAllPatientCount);
			pageLimitAll.setPtotalpages(nowpage);
			pageLimitAll.setPsize(startlimit);
			request.setAttribute("page", pageLimitAll); 
			//model.addAttribute("patientList", queryAllPatientCount);
			System.out.println("count========="+queryAllPatientCount);
			System.out.println("list=="+queryAllPatient.size());
			request.setAttribute("patientList", queryAllPatient);
			return "deleteResource";
		}
	//恢复删除的患者记录
		@RequestMapping(value="/Template/recoveryPatient",method=RequestMethod.POST)
		public void recoveryPatient(HttpServletRequest request,HttpServletResponse response) throws IOException{
			String ids = request.getParameter("ids");
			System.out.println("ids==============="+ids);
			String[] sids = ids.split(",");
			System.out.println("recovery====="+sids[0]);
			int[]  iids=new int[10];
			for(int i=0;i<sids.length;i++){
				System.out.println(sids[i]);
				int a=Integer.parseInt(sids[i]);
				iids[i]=a;
			}
			int recoveryPatient = patientService.recoveryPatient(iids);
			response.setCharacterEncoding("utf-8");
			if(recoveryPatient>0){
				response.getWriter().write("success");
			}else{
				response.getWriter().write("error");
			}
		}
	//跳转到修改患者信息并传值
		@RequestMapping(value="/updateResource",method=RequestMethod.GET)
		public String jumpUpdatePatient(HttpServletRequest req,HttpServletResponse resp,Model model){
			String patient_id=req.getParameter("patient_id");
			System.out.println("this   jump!!!");
			int pat_id=Integer.parseInt(patient_id);
			patientEntity.setPatient_id(pat_id);
			com.imt.pat.entity.patientEntity queryPatientById = patientService.queryPatientById(patientEntity);
			model.addAttribute("patient",queryPatientById);
			SimpleDateFormat sdf = new SimpleDateFormat("MM/dd/yyyy");
			String dates=sdf.format(queryPatientById.getReport_date());
			uploadText up=new uploadText();
			String txt=up.readFileByLines(queryPatientById.getUe());
			model.addAttribute("uetxt",txt);
			model.addAttribute("rep_date",dates);
			return "updatePat";
			
		}
		//修改患者信息
		@RequestMapping(value="/updatePatient",method=RequestMethod.POST)
		public void UpdatePatient(HttpServletRequest req,HttpServletResponse response
				) throws ParseException, IOException{
			
			
			
			int age=Integer.parseInt(req.getParameter("patient_age"));
			int phone=Integer.parseInt(req.getParameter("consultation_phone"));
			int pat_id=Integer.parseInt(req.getParameter("patient_id"));
			patientEntity.setPatient_id(pat_id);
			com.imt.pat.entity.patientEntity queryPatientById = patientService.queryPatientById(patientEntity);
			queryPatientById.setPatient_name(req.getParameter("patient_name"));
			queryPatientById.setPatient_age(age);
			queryPatientById.setPatient_consultation_phone(phone);
			queryPatientById.setPatient_consultation_name(req.getParameter("patient_consultation_name"));
			SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
			String rep_date=req.getParameter("report_date");
			String[] rep_times=rep_date.split("/");
			String times=rep_times[2]+"-"+rep_times[0]+"-"+rep_times[1];
			Date date=sdf.parse(times);
			queryPatientById.setReport_date(date);
			int updatePatient = patientService.updatePatiento(queryPatientById);
			response.setCharacterEncoding("utf-8");
			if(updatePatient>0){
				response.getWriter().write("success");
			}else{
				response.getWriter().write("error");
			}
		}
}
