<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.zzj.dao.TTeamApplyMapper" >
  <resultMap id="BaseResultMap" type="com.zzj.entity.TTeamApply" >
    <id column="Id" property="id" jdbcType="INTEGER" />
    <result column="TeamId" property="teamid" jdbcType="CHAR" />
    <result column="ExpertId" property="expertid" jdbcType="CHAR" />
    <result column="Type" property="type" jdbcType="INTEGER" />
    <result column="PublishDay" property="publishday" jdbcType="TIMESTAMP" />
    <result column="State" property="state" jdbcType="INTEGER" />
    <result column="RefuseReason" property="refusereason" jdbcType="NVARCHAR" />
  </resultMap>
  <sql id="Base_Column_List" >
    Id, TeamId, ExpertId, Type, PublishDay, State, RefuseReason
  </sql>
  <select id="selectByPrimaryKey" resultMap="BaseResultMap" parameterType="java.lang.Integer" >
    select 
    <include refid="Base_Column_List" />
    from T_TeamApply
    where Id = #{id,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer" >
    delete from T_TeamApply
    where Id = #{id,jdbcType=INTEGER}
  </delete>
  <insert id="insert" parameterType="com.zzj.entity.TTeamApply" >
    insert into T_TeamApply (Id, TeamId, ExpertId, 
      Type, PublishDay, State, 
      RefuseReason)
    values (#{id,jdbcType=INTEGER}, #{teamid,jdbcType=CHAR}, #{expertid,jdbcType=CHAR}, 
      #{type,jdbcType=INTEGER}, #{publishday,jdbcType=TIMESTAMP}, #{state,jdbcType=INTEGER}, 
      #{refusereason,jdbcType=NVARCHAR})
  </insert>
  <insert id="insertSelective" parameterType="com.zzj.entity.TTeamApply" >
    insert into T_TeamApply
    <trim prefix="(" suffix=")" suffixOverrides="," >
      <if test="id != null" >
        Id,
      </if>
      <if test="teamid != null" >
        TeamId,
      </if>
      <if test="expertid != null" >
        ExpertId,
      </if>
      <if test="type != null" >
        Type,
      </if>
      <if test="publishday != null" >
        PublishDay,
      </if>
      <if test="state != null" >
        State,
      </if>
      <if test="refusereason != null" >
        RefuseReason,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides="," >
      <if test="id != null" >
        #{id,jdbcType=INTEGER},
      </if>
      <if test="teamid != null" >
        #{teamid,jdbcType=CHAR},
      </if>
      <if test="expertid != null" >
        #{expertid,jdbcType=CHAR},
      </if>
      <if test="type != null" >
        #{type,jdbcType=INTEGER},
      </if>
      <if test="publishday != null" >
        #{publishday,jdbcType=TIMESTAMP},
      </if>
      <if test="state != null" >
        #{state,jdbcType=INTEGER},
      </if>
      <if test="refusereason != null" >
        #{refusereason,jdbcType=NVARCHAR},
      </if>
    </trim>
  </insert>
  <update id="updateByPrimaryKeySelective" parameterType="com.zzj.entity.TTeamApply" >
    update T_TeamApply
    <set >
      <if test="teamid != null" >
        TeamId = #{teamid,jdbcType=CHAR},
      </if>
      <if test="expertid != null" >
        ExpertId = #{expertid,jdbcType=CHAR},
      </if>
      <if test="type != null" >
        Type = #{type,jdbcType=INTEGER},
      </if>
      <if test="publishday != null" >
        PublishDay = #{publishday,jdbcType=TIMESTAMP},
      </if>
      <if test="state != null" >
        State = #{state,jdbcType=INTEGER},
      </if>
      <if test="refusereason != null" >
        RefuseReason = #{refusereason,jdbcType=NVARCHAR},
      </if>
    </set>
    where Id = #{id,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.zzj.entity.TTeamApply" >
    update T_TeamApply
    set TeamId = #{teamid,jdbcType=CHAR},
      ExpertId = #{expertid,jdbcType=CHAR},
      Type = #{type,jdbcType=INTEGER},
      PublishDay = #{publishday,jdbcType=TIMESTAMP},
      State = #{state,jdbcType=INTEGER},
      RefuseReason = #{refusereason,jdbcType=NVARCHAR}
    where Id = #{id,jdbcType=INTEGER}
  </update>
</mapper>